<?xml version="1.0"?>
<!--
  Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
  Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
  Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
  Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
  Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<robot xmlns:xacro="http://ros.org/wiki/xacro">

<!-- Macro to add the mavlink_interface_plugin{-->
  <xacro:macro name="mavlink_interface_macro" params="namespace imu_sub_topic mag_sub_topic baro_sub_topic mavlink_addr mavlink_udp_port mavlink_tcp_port serial_enabled serial_device baudrate qgc_addr qgc_udp_port sdk_addr sdk_udp_port hil_mode hil_state_level vehicle_is_tailsitter send_vision_estimation send_odometry enable_lockstep use_tcp rotor_input_multiplier">
    <gazebo>
      <plugin name="mavlink_interface" filename="libgazebo_mavlink_interface.so">
        <robotNamespace>${namespace}</robotNamespace>
        <imuSubTopic>${imu_sub_topic}</imuSubTopic>
        <magSubTopic>${mag_sub_topic}</magSubTopic>
        <baroSubTopic>${baro_sub_topic}</baroSubTopic>
        <mavlink_addr>${mavlink_addr}</mavlink_addr>
        <mavlink_udp_port>${mavlink_udp_port}</mavlink_udp_port>
        <mavlink_tcp_port>${mavlink_tcp_port}</mavlink_tcp_port>
        <serialEnabled>${serial_enabled}</serialEnabled>
        <serialDevice>${serial_device}</serialDevice>
        <baudRate>${baudrate}</baudRate>
        <qgc_addr>${qgc_addr}</qgc_addr>
        <qgc_udp_port>${qgc_udp_port}</qgc_udp_port>
        <sdk_addr>${sdk_addr}</sdk_addr>
        <sdk_udp_port>${sdk_udp_port}</sdk_udp_port>
        <hil_mode>${hil_mode}</hil_mode>
        <hil_state_level>${hil_state_level}</hil_state_level>
        <vehicle_is_tailsitter>${vehicle_is_tailsitter}</vehicle_is_tailsitter>
        <send_vision_estimation>${send_vision_estimation}</send_vision_estimation>
        <send_odometry>${send_odometry}</send_odometry>
        <enable_lockstep>${enable_lockstep}</enable_lockstep>
        <use_tcp>${use_tcp}</use_tcp>
        <motorSpeedCommandPubTopic>/gazebo/command/motor_speed</motorSpeedCommandPubTopic>

        <control_channels>
          <channel name="rotor1">
            <input_index>0</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>64</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
<!--             <joint_name>${namespace}::rotor_0_joint</joint_name>
 -->          </channel>
          <channel name="rotor2">
            <input_index>1</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>64</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
<!--             <joint_name>${namespace}::rotor_1_joint</joint_name>
 -->          </channel>
          <channel name="rotor3">
            <input_index>2</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>64</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
<!--             <joint_name>${namespace}::rotor_2_joint</joint_name>
 -->          </channel>
          <channel name="rotor4">
            <input_index>3</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>64</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
<!--             <joint_name>${namespace}::rotor_3_joint</joint_name>
 -->          </channel>
          <channel name="rotor5">
            <input_index>4</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>0.15</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name="rotor6">
            <input_index>5</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>0.15</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name="rotor7">
            <input_index>6</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>0.15</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
          <channel name="rotor8">
            <input_index>7</input_index>
            <input_offset>0</input_offset>
            <input_scaling>${rotor_input_multiplier}</input_scaling>
            <zero_position_disarmed>0</zero_position_disarmed>
            <zero_position_armed>0.15</zero_position_armed>
            <joint_control_type>velocity</joint_control_type>
          </channel>
        </control_channels>
      </plugin>
    </gazebo>
  </xacro:macro>

<!--   ======= -->
<!--   Sensors -->
<!--   ======= -->

  <!-- Macro to add the gps_plugin -->
  <xacro:macro name="gps_macro"
    params="gps_name pos_x pos_y pos_z namespace gps_noise gps_xy_random_walk
            gps_z_random_walk gps_xy_noise_density gps_z_noise_density
            update_rate gps_vxy_noise_density gps_vz_noise_density parent_link">
    <gazebo>
      <link name="${gps_name}_link">
        <pose>${pos_x} ${pos_y} ${pos_z} 0 0 0</pose>
        <inertial>
          <pose>0 0 0 0 0 0</pose>
          <mass>0.01</mass>
          <inertia>
            <ixx>2.1733e-6</ixx>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyy>2.1733e-6</iyy>
            <iyz>0</iyz>
            <izz>1.8e-7</izz>
          </inertia>
        </inertial>
        <sensor name="gps" type="gps">
          <pose>0 0 0 0 0 0</pose>
          <plugin name="gps_plugin" filename="libgazebo_gps_plugin.so">
            <robotNamespace>${namespace}</robotNamespace>
            <gpsNoise>${gps_noise}</gpsNoise>
            <gpsXYRandomWalk>${gps_xy_random_walk}</gpsXYRandomWalk>
            <gpsZRandomWalk>${gps_z_random_walk}</gpsZRandomWalk>
            <gpsXYNoiseDensity>${gps_xy_noise_density}</gpsXYNoiseDensity>
            <gpsZNoiseDensity>${gps_z_noise_density}</gpsZNoiseDensity>
            <gpsVXYNoiseDensity>${gps_vxy_noise_density}</gpsVXYNoiseDensity>
            <gpsVZNoiseDensity>${gps_vz_noise_density}</gpsVZNoiseDensity>
            <update_rate>${update_rate}</update_rate>
            <topic>${gps_name}</topic>
          </plugin>
        </sensor>
      </link>
      <joint name="${gps_name}_joint" type="fixed">
        <parent>${parent_link}</parent>
        <child>${gps_name}_link</child>
      </joint>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the magnetometer_plugin-->
  <xacro:macro name="magnetometer_plugin_macro" params="namespace pub_rate noise_density random_walk bias_correlation_time mag_topic">
    <gazebo>
      <plugin name="magnetometer_plugin" filename="libgazebo_magnetometer_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
        <pubRate>${pub_rate}</pubRate>
        <noiseDensity>${noise_density}</noiseDensity>
        <randomWalk>${random_walk}</randomWalk>
        <biasCorrelationTime>${bias_correlation_time}</biasCorrelationTime>
        <magTopic>${mag_topic}</magTopic>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the barometer_plugin-->
  <xacro:macro name="barometer_plugin_macro" params="namespace pub_rate baro_topic baro_drift_pa_per_sec">
    <gazebo>
      <plugin name="barometer_plugin" filename="libgazebo_barometer_plugin.so">
        <robotNamespace>${namespace}</robotNamespace>
        <pubRate>${pub_rate}</pubRate>
        <baroTopic>${baro_topic}</baroTopic>
        <baroDriftPaPerSec>${baro_drift_pa_per_sec}</baroDriftPaPerSec>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add the imu_plugin-->
  <xacro:macro name="imu_plugin_macro"
    params="namespace imu_suffix parent_link imu_topic
      mass_imu_sensor gyroscope_noise_density gyroscope_random_walk
      gyroscope_bias_correlation_time gyroscope_turn_on_bias_sigma
      accelerometer_noise_density accelerometer_random_walk
      accelerometer_bias_correlation_time accelerometer_turn_on_bias_sigma
      *inertia *origin">
    <!-- IMU link -->
    <link name="${namespace}/imu${imu_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_imu_sensor}" />  <!-- [kg] -->
        <origin xyz="0 0 0" rpy="0 0 0" />
      </inertial>
    </link>
    <!-- IMU joint -->
    <joint name="${namespace}/imu${imu_suffix}_joint" type="revolute">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/imu${imu_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="libgazebo_imu_plugin.so" name="rotors_gazebo_imu${imu_suffix}_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
        <robotNamespace>${namespace}</robotNamespace> <!-- (string, required): ros namespace in which the messages are published -->
        <linkName>${namespace}/imu${imu_suffix}_link</linkName> <!-- (string, required): name of the body which holds the IMU sensor -->
        <imuTopic>${imu_topic}</imuTopic> <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
        <gyroscopeNoiseDensity>${gyroscope_noise_density}</gyroscopeNoiseDensity> <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
        <gyroscopeRandomWalk>${gyroscope_random_walk}</gyroscopeRandomWalk> <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
        <gyroscopeBiasCorrelationTime>${gyroscope_bias_correlation_time}</gyroscopeBiasCorrelationTime> <!-- Gyroscope bias correlation time constant [s] -->
        <gyroscopeTurnOnBiasSigma>${gyroscope_turn_on_bias_sigma}</gyroscopeTurnOnBiasSigma> <!-- Gyroscope turn on bias standard deviation [rad/s] -->
        <accelerometerNoiseDensity>${accelerometer_noise_density}</accelerometerNoiseDensity> <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
        <accelerometerRandomWalk>${accelerometer_random_walk}</accelerometerRandomWalk> <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
        <accelerometerBiasCorrelationTime>${accelerometer_bias_correlation_time}</accelerometerBiasCorrelationTime> <!-- Accelerometer bias correlation time constant [s] -->
        <accelerometerTurnOnBiasSigma>${accelerometer_turn_on_bias_sigma}</accelerometerTurnOnBiasSigma> <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add a generic odometry sensor. -->
  <xacro:macro name="odometry_plugin_macro"
    params="
      namespace odometry_sensor_suffix parent_link pose_topic velocity_relative_topic:='velocity_relative' pose_with_covariance_topic
      position_topic transform_topic odometry_topic parent_frame_id child_frame_id
      mass_odometry_sensor measurement_divisor measurement_delay unknown_delay
      noise_normal_position noise_normal_quaternion noise_normal_linear_velocity
      noise_normal_angular_velocity noise_uniform_position
      noise_uniform_quaternion noise_uniform_linear_velocity
      noise_uniform_angular_velocity enable_odometry_map odometry_map
      image_scale *inertia *origin">
    <!-- odometry link -->
    <link name="${namespace}/odometry_sensor${odometry_sensor_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_odometry_sensor}" />  <!-- [kg] -->
      </inertial>
    </link>
    <!-- odometry joint -->
    <joint name="${namespace}/odometry_sensor${odometry_sensor_suffix}_joint" type="revolute">
      <parent link="${parent_link}" />
      <xacro:insert_block name="origin" />
      <child link="${namespace}/odometry_sensor${odometry_sensor_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="librotors_gazebo_odometry_plugin.so" name="odometry_sensor${odometry_sensor_suffix}">
        <linkName>${namespace}/odometry_sensor${odometry_sensor_suffix}_link</linkName>
        <robotNamespace>${namespace}</robotNamespace>
        <poseTopic>${pose_topic}</poseTopic>
        <velocityRelativeTopic>${velocity_relative_topic}</velocityRelativeTopic>
        <poseWithCovarianceTopic>${pose_with_covariance_topic}</poseWithCovarianceTopic>
        <positionTopic>${position_topic}</positionTopic>
        <transformTopic>${transform_topic}</transformTopic>
        <odometryTopic>${odometry_topic}</odometryTopic>
        <parentFrameId>${parent_frame_id}</parentFrameId> <!-- Use the scoped link name here. e.g. Model::link. -->
        <childFrameId>${child_frame_id}</childFrameId>
        <measurementDivisor>${measurement_divisor}</measurementDivisor> <!-- only every (seq % measurementDivisor) == 0 measurement is published [int] -->
        <measurementDelay>${measurement_delay}</measurementDelay> <!-- time that measurement gets held back before it's published in [simulation cycles (int)] -->
        <unknownDelay>${unknown_delay}</unknownDelay> <!-- additional delay, that just gets added to the timestamp [s] -->
        <noiseNormalPosition>${noise_normal_position}</noiseNormalPosition> <!-- standard deviation of additive white gaussian noise [m] -->
        <noiseNormalQuaternion>${noise_normal_quaternion}</noiseNormalQuaternion> <!-- standard deviation white gaussian noise [rad]: q_m = q*quaternionFromSmallAngleApproximation(noiseNormalQ) -->
        <noiseNormalLinearVelocity>${noise_normal_linear_velocity}</noiseNormalLinearVelocity> <!-- standard deviation of additive white gaussian noise [m/s] -->
        <noiseNormalAngularVelocity>${noise_normal_angular_velocity}</noiseNormalAngularVelocity> <!-- standard deviation of additive white gaussian noise [rad/s] -->
        <noiseUniformPosition>${noise_uniform_position}</noiseUniformPosition> <!-- symmetric bounds of uniform noise [m] -->
        <noiseUniformQuaternion>${noise_uniform_quaternion}</noiseUniformQuaternion> <!-- symmetric bounds of uniform noise [rad], computation see above -->
        <noiseUniformLinearVelocity>${noise_uniform_linear_velocity}</noiseUniformLinearVelocity> <!-- symmetric bounds of uniform noise [m/s] -->
        <noiseUniformAngularVelocity>${noise_uniform_angular_velocity}</noiseUniformAngularVelocity> <!-- symmetric bounds of uniform noise [rad/s] -->
        <xacro:if value="${enable_odometry_map}">
          <covarianceImage>package://rotors_gazebo/resource/${odometry_map}</covarianceImage> <!-- a bitmap image describing where the sensor works (white), and where not (black) -->
          <covarianceImageScale>${image_scale}</covarianceImageScale> <!-- the scale of the image in the gazebo world, if set to 1.0, 1 pixel in the image corresponds to 1 meter in the world -->
        </xacro:if>
      </plugin>
    </gazebo>
  </xacro:macro>

</robot>
